// Package config provides configuration management for the metrics server.
// It defines a Config struct to hold various configuration parameters
// such as server address, log level, data restoration setting, storage path,
// store interval, database DSN, and authentication key.
// The package includes functions for parsing configuration from command line flags
// and environment variables, allowing flexibility in configuration.
// Additionally, utility functions from the internal configutils package are used
// to handle default values and set environment variables if needed.
package config

import (
	"flag"
	"fmt"
	"time"

	"github.com/caarlos0/env"
	"github.com/erupshis/metrics/internal/configutils"
)

// Config represents the configuration parameters for the metrics server.
//
// //go:generate easyjson -all config.go //DO NOT REGENERATE THIS FILE StoreInterval were modified in autogenerated file.
type Config struct {
	Host          string        `json:"address"`        // Host is the server endpoint (default: localhost:8080).
	LogLevel      string        `json:"log_level"`      // LogLevel is the log level for the metrics server (default: Info).
	Restore       bool          `json:"restore"`        // Restore enables or disables restoring values from a file (default: true).
	StoreInterval time.Duration `json:"store_interval"` // StoreInterval is the interval at which metrics are stored (default: 5 seconds).
	StoragePath   string        `json:"storage_file"`   // StoragePath is the file storage path for metrics data.
	DataBaseDSN   string        `json:"database_dsn"`   // DataBaseDSN is the DSN for connecting to the metrics database.
	Key           string        `json:"hash_key"`       // Key is the authentication key for the metrics server.
	KeyRSA        string        `json:"crypto_key"`     // KeyRSA private key for connection.
	TrustedSubnet string        `json:"trusted_subnet"` // TrustedSubnet CIDR settings.
}

// Default configs preset.
var configDefault = Config{
	Host:          "localhost:8080",
	LogLevel:      "Info",
	Restore:       true,
	StoreInterval: 5 * time.Second,
	StoragePath:   "", // "/tmp/metrics-db.json"
	DataBaseDSN:   "postgres://postgres:postgres@localhost:5432/metrics_db?sslmode=disable",
	Key:           "123",
	KeyRSA:        "rsa/key.pem",
	TrustedSubnet: "169.254.98.134/24",
}

// Parse reads and parses command line flags, updating the provided Config.
func Parse() (Config, error) {
	var config = configDefault
	if err := configutils.CheckConfigFile(&config); err != nil {
		return config, fmt.Errorf("parse config file: %w", err)
	}
	checkFlags(&config)

	if err := checkEnvironments(&config); err != nil {
		return config, fmt.Errorf("parse config: %w", err)
	}

	return config, nil
}

// FLAGS PARSING.

// Constants representing command line flags.
const (
	flagAddress       = "a"          // flagAddress represents the server endpoint.
	flagLogLevel      = "l"          // flagLogLevel represents the log level.
	flagRestore       = "r"          // flagRestore represents the data restoration setting.
	flagStoragePath   = "f"          // flagStoragePath represents the file storage path.
	flagStoreInterval = "i"          // flagStoreInterval represents the store interval.
	flagDataBaseDSN   = "d"          // flagDataBaseDSN represents the database DSN.
	flagKey           = "k"          // flagKey represents the hash key.
	flagKeyRSA        = "crypto-key" // flagKeyRSA private connection key.
	flagTrustedSubnet = "t"          // flagTrustedSubnet CIDR settings.
)

// checkFlags initializes and parses command line flags, updating the provided Config.
func checkFlags(config *Config) {
	flag.StringVar(&config.Host, flagAddress, config.Host, "server endpoint")
	flag.StringVar(&config.LogLevel, flagLogLevel, config.LogLevel, "log level")
	flag.BoolVar(&config.Restore, flagRestore, config.Restore, "restore values from file")

	flag.StringVar(&config.StoragePath, flagStoragePath, config.StoragePath, "file storage path")
	flag.DurationVar(&config.StoreInterval, flagStoreInterval, config.StoreInterval, "store interval val (sec)")

	flag.StringVar(&config.DataBaseDSN, flagDataBaseDSN, config.DataBaseDSN, "database DSN")
	flag.StringVar(&config.Key, flagKey, config.Key, "Auth key")
	flag.StringVar(&config.KeyRSA, flagKeyRSA, config.KeyRSA, "private RSA key path")
	flag.StringVar(&config.TrustedSubnet, flagTrustedSubnet, config.TrustedSubnet, "CIDR - Classless Inter-Domain Routing")
	flag.Parse()
}

// ENVIRONMENTS PARSING.

// envConfig represents the configuration parameters read from environment variables.
type envConfig struct {
	Host          string `env:"ADDRESS"`           // Host is the server endpoint.
	LogLevel      string `env:"LOG_LEVEL"`         // LogLevel is the log level.
	Restore       bool   `env:"RESTORE"`           // Restore is the data restoration setting.
	StoragePath   string `env:"FILE_STORAGE_PATH"` // StoragePath is the file storage path.
	StoreInterval string `env:"STORE_INTERVAL"`    // StoreInterval is the store interval.
	DataBaseDSN   string `env:"DATABASE_DSN"`      // DataBaseDSN is the database DSN.
	Key           string `env:"KEY"`               // Key is the hash key.
	KeyRSA        string `env:"CRYPTO_KEY"`        // KeyRSA private key for connection.
	TrustedSubnet string `env:"TRUSTED_SUBNET"`    // TrustedSubnet - cidr settings.
}

// checkEnvironments reads and parses environment variables, updating the provided Config.
func checkEnvironments(config *Config) error {
	var envs = envConfig{}
	err := env.Parse(&envs)
	if err != nil {
		return fmt.Errorf("parse config environments: %w", err)
	}

	configutils.SetEnvToParamIfNeed(&config.Host, envs.Host)
	configutils.SetEnvToParamIfNeed(&config.LogLevel, envs.LogLevel)
	configutils.SetEnvToParamIfNeed(&config.StoragePath, envs.StoragePath)
	configutils.SetEnvToParamIfNeed(&config.StoreInterval, envs.StoreInterval)
	configutils.SetEnvToParamIfNeed(&config.DataBaseDSN, envs.DataBaseDSN)
	configutils.SetEnvToParamIfNeed(&config.Key, envs.Key)
	configutils.SetEnvToParamIfNeed(&config.KeyRSA, envs.KeyRSA)
	configutils.SetEnvToParamIfNeed(&config.TrustedSubnet, envs.TrustedSubnet)

	config.Restore = envs.Restore || config.Restore

	return nil
}
