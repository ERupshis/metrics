// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/metrics/internal/server/memstorage/storagemngr (interfaces: StorageManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockStorageManager) CheckConnection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockStorageManagerMockRecorder) CheckConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockStorageManager)(nil).CheckConnection))
}

// Close mocks base method.
func (m *MockStorageManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageManager)(nil).Close))
}

// RestoreDataFromStorage mocks base method.
func (m *MockStorageManager) RestoreDataFromStorage() (map[string]float64, map[string]int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDataFromStorage")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(map[string]int64)
	return ret0, ret1
}

// RestoreDataFromStorage indicates an expected call of RestoreDataFromStorage.
func (mr *MockStorageManagerMockRecorder) RestoreDataFromStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDataFromStorage", reflect.TypeOf((*MockStorageManager)(nil).RestoreDataFromStorage))
}

// SaveMetricsInStorage mocks base method.
func (m *MockStorageManager) SaveMetricsInStorage(arg0, arg1 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveMetricsInStorage", arg0, arg1)
}

// SaveMetricsInStorage indicates an expected call of SaveMetricsInStorage.
func (mr *MockStorageManagerMockRecorder) SaveMetricsInStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetricsInStorage", reflect.TypeOf((*MockStorageManager)(nil).SaveMetricsInStorage), arg0, arg1)
}
